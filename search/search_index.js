const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Lighthouse Scalar This package provides a set of custom scalars for use with Lighthouse , a PHP port of the popular GraphQL server.","title":"Lighthouse Scalar"},{"location":"index.html#lighthouse-scalar","text":"This package provides a set of custom scalars for use with Lighthouse , a PHP port of the popular GraphQL server.","title":"Lighthouse Scalar"},{"location":"Scalars/CountryCode.html","text":"Country Code Following the ISO 3166-1 alpha-2 standard, the country code is a two-letter code that represents a country. Examples: US - United States CA - Canada GB - United Kingdom FR - France Coercions The country code is coerced to uppercase. Validations The country code is validated using the ISO 3166-1 alpha-2 standard. Usage # schema.graphql type Query { country(code: CountryCode!): Country! } type Country { name: String! code: CountryCode! } # request query { country(code: \"US\") { name code } } # { # \"data\": { # \"country\": { # \"name\": \"United States\", # \"code\": \"US\" # } # } # }","title":"Country Code"},{"location":"Scalars/CountryCode.html#country-code","text":"Following the ISO 3166-1 alpha-2 standard, the country code is a two-letter code that represents a country. Examples: US - United States CA - Canada GB - United Kingdom FR - France","title":"Country Code"},{"location":"Scalars/CountryCode.html#coercions","text":"The country code is coerced to uppercase.","title":"Coercions"},{"location":"Scalars/CountryCode.html#validations","text":"The country code is validated using the ISO 3166-1 alpha-2 standard.","title":"Validations"},{"location":"Scalars/CountryCode.html#usage","text":"# schema.graphql type Query { country(code: CountryCode!): Country! } type Country { name: String! code: CountryCode! } # request query { country(code: \"US\") { name code } } # { # \"data\": { # \"country\": { # \"name\": \"United States\", # \"code\": \"US\" # } # } # }","title":"Usage"},{"location":"Scalars/CurrencyCode.html","text":"Currency Code Following the ISO 4217 standard , the currency code is a three-letter code that represents a currency. Examples: USD - United States Dollar CAD - Canadian Dollar GBP - British Pound EUR - Euro JPY - Japanese Yen Please note: Cryptocurrencies are not included in this standard. Coercions The currency code is coerced to uppercase. Validations The currency code is validated using the ISO 4217 alpha-3 standard. Usage # schema.graphql type Query { currency(code: CurrencyCode!): Currency! } type Currency { name: String! code: CurrencyCode! } # request query { currency(code: \"USD\") { name code } } # { # \"data\": { # \"currency\": { # \"name\": \"United States Dollar\", # \"code\": \"USD\" # } # } # }","title":"Currency Code"},{"location":"Scalars/CurrencyCode.html#currency-code","text":"Following the ISO 4217 standard , the currency code is a three-letter code that represents a currency. Examples: USD - United States Dollar CAD - Canadian Dollar GBP - British Pound EUR - Euro JPY - Japanese Yen Please note: Cryptocurrencies are not included in this standard.","title":"Currency Code"},{"location":"Scalars/CurrencyCode.html#coercions","text":"The currency code is coerced to uppercase.","title":"Coercions"},{"location":"Scalars/CurrencyCode.html#validations","text":"The currency code is validated using the ISO 4217 alpha-3 standard.","title":"Validations"},{"location":"Scalars/CurrencyCode.html#usage","text":"# schema.graphql type Query { currency(code: CurrencyCode!): Currency! } type Currency { name: String! code: CurrencyCode! } # request query { currency(code: \"USD\") { name code } } # { # \"data\": { # \"currency\": { # \"name\": \"United States Dollar\", # \"code\": \"USD\" # } # } # }","title":"Usage"},{"location":"Scalars/Email.html","text":"Email Following the RFC 5322 standard, the Email scalar type represents textual data, specifically an email address. Coercions No coercions are applied to the email address. Validations The email address is validated using the RFC 5322 standard. Using the filter_var function with the FILTER_VALIDATE_EMAIL filter. Usage # schema.graphql type Query { user(email: Email!): User! } type User { name: String! email: Email! } # request query { user(email: \"example@example.org\") { name email } } # { # \"data\": { # \"user\": { # \"name\": \"Example\", # \"email\": \"example@example.org\" # } # } # }","title":"Email"},{"location":"Scalars/Email.html#email","text":"Following the RFC 5322 standard, the Email scalar type represents textual data, specifically an email address.","title":"Email"},{"location":"Scalars/Email.html#coercions","text":"No coercions are applied to the email address.","title":"Coercions"},{"location":"Scalars/Email.html#validations","text":"The email address is validated using the RFC 5322 standard. Using the filter_var function with the FILTER_VALIDATE_EMAIL filter.","title":"Validations"},{"location":"Scalars/Email.html#usage","text":"# schema.graphql type Query { user(email: Email!): User! } type User { name: String! email: Email! } # request query { user(email: \"example@example.org\") { name email } } # { # \"data\": { # \"user\": { # \"name\": \"Example\", # \"email\": \"example@example.org\" # } # } # }","title":"Usage"},{"location":"Scalars/Emoji.html","text":"Emoji String expecting exactly one unicode emoji. Examples: \ud83d\ude42 \ud83d\udc4d \ud83c\udf55 \ud83d\ude80 \ud83c\udf89 \ud83d\udd25 Coercions No coercions are applied to the emoji. Validations The emoji is validated using the emoji-detector-php library. Usage # schema.graphql type Query { mood: Emoji! } # request query { mood } { \"data\" : { \"mood\" : \"\ud83d\ude42\" } }","title":"Emoji"},{"location":"Scalars/Emoji.html#emoji","text":"String expecting exactly one unicode emoji. Examples: \ud83d\ude42 \ud83d\udc4d \ud83c\udf55 \ud83d\ude80 \ud83c\udf89 \ud83d\udd25","title":"Emoji"},{"location":"Scalars/Emoji.html#coercions","text":"No coercions are applied to the emoji.","title":"Coercions"},{"location":"Scalars/Emoji.html#validations","text":"The emoji is validated using the emoji-detector-php library.","title":"Validations"},{"location":"Scalars/Emoji.html#usage","text":"# schema.graphql type Query { mood: Emoji! } # request query { mood } { \"data\" : { \"mood\" : \"\ud83d\ude42\" } }","title":"Usage"},{"location":"Scalars/GeoCoordinate.html","text":"GeoCoordinate SHOULD NOT BE USED DIRECTLY A float value representing a geographic coordinate. The value must be within the range of -90 to 90 for latitude and -180 to 180 for longitude. Examples: 40.7128 - New York City Latitude -74.0060 - New York City Longitude 51.5074 - London Latitude -0.1278 - London Longitude 48.8566 - Paris Latitude 2.3522 - Paris Longitude 34.0522 - Los Angeles Latitude -118.2437 - Los Angeles Longitude Coercions The value is coerced to a float. Supports input as sexagesimal degrees (DMS) in the format 40\u00b0 26' 46\" N or 40\u00b0 26' 46\" W . Validations The value is validated to be within the range of -180 to 180. Usage # schema.graphql type Query { location: Location! } type Location { name: String! coordinate: [GeoCoordinate!]! } # request query { location { name coordinate } } # { # \"data\": { # \"location\": { # \"name\": \"New York City\", # \"coordinate\": [40.7128, -74.0060] # } # } # }","title":"GeoCoordinate"},{"location":"Scalars/GeoCoordinate.html#geocoordinate","text":"SHOULD NOT BE USED DIRECTLY A float value representing a geographic coordinate. The value must be within the range of -90 to 90 for latitude and -180 to 180 for longitude. Examples: 40.7128 - New York City Latitude -74.0060 - New York City Longitude 51.5074 - London Latitude -0.1278 - London Longitude 48.8566 - Paris Latitude 2.3522 - Paris Longitude 34.0522 - Los Angeles Latitude -118.2437 - Los Angeles Longitude","title":"GeoCoordinate"},{"location":"Scalars/GeoCoordinate.html#coercions","text":"The value is coerced to a float. Supports input as sexagesimal degrees (DMS) in the format 40\u00b0 26' 46\" N or 40\u00b0 26' 46\" W .","title":"Coercions"},{"location":"Scalars/GeoCoordinate.html#validations","text":"The value is validated to be within the range of -180 to 180.","title":"Validations"},{"location":"Scalars/GeoCoordinate.html#usage","text":"# schema.graphql type Query { location: Location! } type Location { name: String! coordinate: [GeoCoordinate!]! } # request query { location { name coordinate } } # { # \"data\": { # \"location\": { # \"name\": \"New York City\", # \"coordinate\": [40.7128, -74.0060] # } # } # }","title":"Usage"},{"location":"Scalars/Latitude.html","text":"Latitude A float value representing a Longitude. The value must be within the range of -90 to 90. Examples: 40.7128 - New York City Latitude 51.5074 - London Latitude 48.8566 - Paris Latitude 34.0522 - Los Angeles Latitude -23.5505 - S\u00e3o Paulo Latitude Coercions The value is coerced to a float. Supports input as sexagesimal degrees (DMS) in the format 40\u00b0 26' 46\" N or 40\u00b0 26' 46\" W . Validations The value is validated to be within the range of -90 to 90. Usage # schema.graphql type Query { location: Coordinate! } type Coordinate { latitude: Latitude! longitude: Longitude! } # request query { location { latitude longitude } } # { # \"data\": { # \"location\": { # \"latitude\": 40.7128, # \"longitude\": -74.0060 # } # } # }","title":"Latitude"},{"location":"Scalars/Latitude.html#latitude","text":"A float value representing a Longitude. The value must be within the range of -90 to 90. Examples: 40.7128 - New York City Latitude 51.5074 - London Latitude 48.8566 - Paris Latitude 34.0522 - Los Angeles Latitude -23.5505 - S\u00e3o Paulo Latitude","title":"Latitude"},{"location":"Scalars/Latitude.html#coercions","text":"The value is coerced to a float. Supports input as sexagesimal degrees (DMS) in the format 40\u00b0 26' 46\" N or 40\u00b0 26' 46\" W .","title":"Coercions"},{"location":"Scalars/Latitude.html#validations","text":"The value is validated to be within the range of -90 to 90.","title":"Validations"},{"location":"Scalars/Latitude.html#usage","text":"# schema.graphql type Query { location: Coordinate! } type Coordinate { latitude: Latitude! longitude: Longitude! } # request query { location { latitude longitude } } # { # \"data\": { # \"location\": { # \"latitude\": 40.7128, # \"longitude\": -74.0060 # } # } # }","title":"Usage"},{"location":"Scalars/Longitude.html","text":"Longitude A float value representing a Longitude. The value must be within the range of -180 to 180. Examples: -74.0060 - New York City Longitude -0.1278 - London Longitude 2.3522 - Paris Longitude -118.2437 - Los Angeles Longitude Coercions The value is coerced to a float. Supports input as sexagesimal degrees (DMS) in the format 40\u00b0 26' 46\" N or 40\u00b0 26' 46\" W . Validations The value is validated to be within the range of -180 to 180. Usage # schema.graphql type Query { location: Coordinate! } type Coordinate { latitude: Latitude! longitude: Longitude! } # request query { location { latitude longitude } } # { # \"data\": { # \"location\": { # \"latitude\": 40.7128, # \"longitude\": -74.0060 # } # } # }","title":"Longitude"},{"location":"Scalars/Longitude.html#longitude","text":"A float value representing a Longitude. The value must be within the range of -180 to 180. Examples: -74.0060 - New York City Longitude -0.1278 - London Longitude 2.3522 - Paris Longitude -118.2437 - Los Angeles Longitude","title":"Longitude"},{"location":"Scalars/Longitude.html#coercions","text":"The value is coerced to a float. Supports input as sexagesimal degrees (DMS) in the format 40\u00b0 26' 46\" N or 40\u00b0 26' 46\" W .","title":"Coercions"},{"location":"Scalars/Longitude.html#validations","text":"The value is validated to be within the range of -180 to 180.","title":"Validations"},{"location":"Scalars/Longitude.html#usage","text":"# schema.graphql type Query { location: Coordinate! } type Coordinate { latitude: Latitude! longitude: Longitude! } # request query { location { latitude longitude } } # { # \"data\": { # \"location\": { # \"latitude\": 40.7128, # \"longitude\": -74.0060 # } # } # }","title":"Usage"}]}; var __search = { index: Promise.resolve(local_index) }